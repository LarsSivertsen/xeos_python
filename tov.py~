import numpy as np
from scipy.integrate import solve_ivp
import utils
import write_eos_to_file as wrt



def tov_ode(h, y, eos):
    r, m, H, b = y
    e = eos.energy_density_from_pseudo_enthalpy(h)
    p = eos.pressure_from_pseudo_enthalpy(h)
    dedp = e / p * eos.log_dedp_from_log_pressure(np.log(p))
    

    A = 1. / (1. - 2. * m / r)
    C1 = 2. / r + A * (2. * m / (r * r) + 4. * np.pi * r * (p - e))
    C0 = A * (-(2) * (2 + 1) / (r * r) + 4. * np.pi * (e + p) * dedp +
              4. * np.pi * (5. * e + 9. * p)) - \
        np.power(2. * (m + 4. * np.pi * r * r * r * p) / (r * (r - 2. * m)), 2.)

    drdh = -r * (r - 2. * m) / (m + 4. * np.pi * r * r * r * p)
    dmdh = 4. * np.pi * r * r * e * drdh
    dHdh = b * drdh
    dbdh = -(C0 * H + C1 * b) * drdh

    dydt = [drdh, dmdh, dHdh, dbdh]

    return dydt


def calc_k2(R, M, H, b):

    y = R * b / H
    C = M / R

    num = (8. / 5.) * np.power(1 - 2 * C, 2.) * np.power(C, 5.) * \
        (2 * C * (y - 1) - y + 2)
    den = 2 * C * (4 * (y + 1) * np.power(C, 4) + (6 * y - 4) * np.power(C, 3) +
                   (26 - 22 * y) * C * C + 3 * (5 * y - 8) * C - 3 * y + 6)
    den -= 3 * np.power(1 - 2 * C, 2) * (2 * C * (y - 1) - y + 2) * \
        np.log(1.0 / (1 - 2 * C))

    return num / den


def TOVSolver(P_vec,e_vec,h_vec,P_c):
    # central values
    P_vec,e_vec,rho_vec = wrt.read_EoS_from_file(filename)
    h_c = np.interp(P_c,P_vec,h_vec)
    e_c = np.interp(P_c,P_vec,e_vec)
    dedP_c = np.interp(P_c,P_vec,np.grad(e_vec,P_vec))
    dhdp_c = 1. / (e_c + P_c)
    dedh_c = dedp_c / dhdp_c

    # initial values

    dh = -1e-3 * h_c
    h0 = h_c + dh
    h1 = -dh
    r_0 = np.sqrt(3.*(-dh)/2./np.pi/(e_c+3.*P_c))
    r_0 *= 1.-0.25*(e_c-3.*P_c-0.6*dedh_c)*(-dh)/(ec+3.*P_c)
    m_0 = 4.*np.pi*e_c*np.power(r_0,3.)/3.
    m_0 *= 1.-0.6*dedh_c*(-dh)/e_c
    H_0 = r0*r0
    b_0 = 2.*r0

    y0 = [r0, m0, H0, b0]
    sol = solve_ivp(lambda h,y: tov_ode(h,y,eos), (h0, h1), y0,
                    rtol=1e-2, atol=0., method='RK23')
    # take one final Euler step to get to the surface
    R = sol.y[0, -1]
    M = sol.y[1, -1]
    H = sol.y[2, -1]
    b = sol.y[3, -1]

    y1 = [R, M, H, b]
    dydt1 = tov_ode(h1, y1, eos)
    for i in range(0, len(y1)):
        y1[i] += dydt1[i] * (0. - h1)

    R, M, H, b = y1
    k2 = calc_k2(R, M, H, b)

    return M, R, k2

def MR_relation(filename,P_c_vec):
    P_vec,e_vec,rho_vec = wrt.read_EoS_from_file(filename)
    N_P_c = len(P_c_vec)
    integrand = P_vec/(e_vec+P_vec)
    h_vec = integrate.cumptrapz(integrand,np.log(P_vec),initial=0)+integrand[0]
    M_vec = np.zeros(N)
    R_vec = np.zeros(N)
    k2_vec = np.zeros(N)
    for i in range(len(P_c_vec)):
        M,R,k2 = TOVSolver(P_vec,e_vec,h_vec,P_c_vec[i])
        M_vec[i] = M
        R_vec[i] = R
        k2_vec[i] = k2
    return M_vec,R_vec,k2_vec
